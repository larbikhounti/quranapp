{"version":3,"sources":["components/navigationbar.js","components/listofmokrie.js","components/container.js","components/getquran.js","mainjs/app.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","bar","backgroundColor","green","display","flexDirection","height","justifyContent","grow","flexGrow","mystyle","padding","fontSize","logo","PrimarySearchAppBar","classes","className","AppBar","position","Typography","variant","noWrap","root","width","maxWidth","alignSelf","palette","background","paper","playbutton","color","cursor","pinterlist","marginBottom","roundedplay","inputRoot","borderBottom","inputInput","fontWeight","direction","Listofmokrie","props","List","InputBase","onChange","search","placeholder","input","inputProps","style","marginRight","undefined","data","ListItem","ListItemAvatar","Avatar","Skeleton","map","element","i","key","number","id","onClick","itemclicked","bind","ListItemText","primary","name","secondary","englishName","numberOfAyahs","revelationType","axios","require","marginTop","choosemokrea","textAlign","control","spacing","marginLeft","player","ayatsText","ontabletorphone","fontsize","Mycontainer","useState","quranData","setQranData","count","setCount","anchorEl","setAnchorEl","mokrie","setMokrie","handleClose","event","console","log","target","getAttribute","getSoraById","get","then","response","ayahs","catch","error","isTabletOrMobile","useMediaQuery","Grid","container","item","xs","md","lg","controls","onPlay","length","text","onEnded","url","audio","playing","Button","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","open","Boolean","onClose","edition","MenuItem","identifier","Getquran","setState","searching","value","state","ayat","this","filteredayat","filter","aya","toLowerCase","includes","Component","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d492db16.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    bar :{\r\n            backgroundColor : green[600],\r\n            display: \"flex\",\r\n            flexDirection : \"row\",\r\n            height : \"4em\",\r\n            justifyContent : \"center\"\r\n            \r\n            \r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n      },\r\n      mystyle: {\r\n        padding :\"0.3em\",\r\n        fontSize :\"2em\"\r\n      },\r\n      logo : {\r\n        \r\n        padding :\"0.5em\"\r\n      }\r\n     \r\n}));\r\n\r\nexport default function PrimarySearchAppBar() {\r\n  const classes = useStyles();\r\n \r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar className = {classes.bar} position=\"static\">\r\n\r\n         <Typography  className ={classes.mystyle} variant=\"h6\" noWrap>\r\n         الْقُرْآن الْكَرِيْم \r\n          </Typography>\r\n          \r\n      </AppBar>\r\n     \r\n     \r\n    </div>\r\n  \r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { green } from '@material-ui/core/colors';\r\nimport HearingIcon from '@material-ui/icons/Hearing';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      alignSelf:\"center\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      \r\n    },\r\n    playbutton:{\r\n        color:green[900],  \r\n        cursor : \"pointer\"\r\n\r\n    },\r\n    pinterlist : {\r\n      cursor : \"pointer\",\r\n      marginBottom : \"5px\"\r\n    },\r\n    roundedplay : {\r\n        backgroundColor : green[100]\r\n    },\r\n    inputRoot : {\r\n      width: \"100%\",\r\n    height: \"3em\",\r\n    borderBottom: '1px solid darkseagreen'\r\n    },\r\n    inputInput :{\r\n      padding : \"2em\",\r\n      color:green[700],\r\n      fontWeight : 900,\r\n      direction: 'rtl'\r\n    }\r\n  }));\r\n \r\nconst Listofmokrie = (props) => {\r\n    const classes = useStyles();\r\n  \r\n   return (\r\n        \r\n        <List className={classes.root}>\r\n              <InputBase \r\n              onChange={props.search}\r\n              placeholder=\"إبحث...\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n             <Scrollbars style={{ width: \"100%\", height :\"29em\",marginRight:\"0px\" }}> \r\n             {\r\n                \r\n               props.data[0] === undefined? \r\n               <div>\r\n                 <ListItem className = {classes.pinterlist} >\r\n                    <ListItemAvatar>\r\n                    <Avatar  className={classes.roundedplay} >\r\n                    <Skeleton variant=\"circle\" width={40} height={40} />\r\n                    </Avatar>\r\n                     </ListItemAvatar>\r\n                     <Skeleton variant=\"text\" width=\"100%\" />\r\n                    </ListItem>\r\n                    \r\n               </div>\r\n               :\r\n              props.data.map((element,i)=>{\r\n                  return(\r\n                   \r\n                    <ListItem className = {classes.pinterlist}  key={props.data[i].number}>\r\n                    <ListItemAvatar id={props.data[i].number} onClick={props.itemclicked.bind(this, i)}>\r\n                    <Avatar id={props.data[i].number}  onClick={props.itemclicked.bind(this, i)} className={classes.roundedplay}  >\r\n                    <HearingIcon className={classes.playbutton} id={props.data[i].number}  onClick={props.itemclicked.bind(this, i)} />\r\n                    </Avatar>\r\n                     </ListItemAvatar>\r\n                     <ListItemText   primary={`${props.data[i].name}`} secondary={props.data[i].englishName}  />\r\n                     <ListItemText   primary={props.data[i].numberOfAyahs} secondary={props.data[i].revelationType}  />\r\n                    </ListItem>\r\n                  )\r\n              })\r\n         \r\n          }\r\n        \r\n        </Scrollbars>\r\n      </List>\r\n    )\r\n}\r\n\r\nexport default Listofmokrie;","import React,{useState} from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Listofmokrie from '../components/listofmokrie';\r\nimport ReactPlayer from 'react-player'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst axios = require('axios');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      \r\n      marginTop : \"2em\"\r\n    },\r\n    choosemokrea :{\r\n      backgroundColor :\"white\",\r\n      color : green[600],\r\n      textAlign: \"center\",\r\n      fontSize : \"1em\",\r\n      marginTop: \"1em\",\r\n      width : \"100%\",\r\n      fontWeight : \"bolder\",\r\n      borderBottom : \"1px solid #A5D6A7\"\r\n\r\n      \r\n    },\r\n    paper: {\r\n    backgroundColor : green[200],  \r\n    },\r\n    control: {\r\n      padding: theme.spacing(3),\r\n      height :\"30em\",\r\n      marginLeft : \"1em\",\r\n      marginRight : \"1em\"\r\n    },\r\n    player : {\r\n     \r\n      height : \"100px\"\r\n    },\r\n    ayatsText : {\r\n      backgroundColor :\"white\",\r\n      color : green[600],\r\n      textAlign: \"center\",\r\n      fontSize : \"3em\",\r\n      marginTop: \"1em\",\r\n      width : \"100%\",\r\n      height : \"100%\",\r\n\r\n    },\r\n    ontabletorphone :{\r\n      backgroundColor :\"white\",\r\n      color : green[600],\r\n      \r\n      marginTop: \"1em\",\r\n      \r\n      width : \"100%\",\r\n      textAlign: \"center\",\r\n    },\r\n    fontsize : {\r\n      fontSize: \"medium\",\r\n    }\r\n  }));\r\n\r\n \r\n  \r\n \r\nconst Mycontainer = (props) => {\r\n  let [quranData,setQranData] = useState([])\r\n  let [count,setCount] = useState(0)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  let [mokrie,setMokrie] = useState(\"ar.alafasy\")\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    \r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    console.log(event.target.getAttribute(\"id\"))\r\n    if(event.target.getAttribute(\"id\") !== null){\r\n      setMokrie(setMokrie = event.target.getAttribute(\"id\") )\r\n      setAnchorEl(null);\r\n    }\r\n    \r\n\r\n    \r\n    \r\n  };\r\n\r\n  const onEnded = ()=>{\r\n    if(count < quranData.length-1){\r\n      console.log(\"ended\")\r\n      setCount(count+1)\r\n      console.log(count)\r\n     // console.log(quranData[count].text)\r\n    }\r\n    \r\n  }\r\n  const onPlay = ()=>{\r\n    if(count <= quranData.length-1){\r\n     \r\n      console.log(quranData[count].text)\r\n    }\r\n    \r\n  }\r\n  const itemclicked = (i, event)=>{\r\n    setCount(0)\r\n    getSoraById(event.target.getAttribute('id'))\r\n    console.log(event.target.getAttribute('id'))\r\n  }\r\n  const getSoraById = (number)=>{\r\n    //get aya by id\r\n    axios.get(`https://api.alquran.cloud/v1/surah/${number}/${mokrie}`)\r\n        .then( response =>{\r\n           console.log(response.data.data.ayahs)\r\n           //quranData = response.data.data.ayahs\r\n          setQranData(response.data.data.ayahs)\r\n          // console.log(quranData.length)\r\n        })\r\n        .catch(function (error) {\r\n          // handle error\r\n         // console.log(error);\r\n        })\r\n  }\r\n  \r\n\r\n    const classes = useStyles();\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: 1224 })\r\n    return (\r\n        <Grid container className={classes.root}  spacing={2}>\r\n            <Grid  className={classes.paper}  item  xs ={12} md={8} lg={8}>\r\n            {\r\n              \r\n            quranData[0] === undefined  ? null :<div> <ReactPlayer height =\"2em\" width =\"100%\" controls={true} onPlay={onPlay} onEnded={onEnded} \r\n             className={classes.player} \r\n             url={ quranData[count].audio  } \r\n             playing ={true}  />\r\n\r\n             {\r\n               isTabletOrMobile === true?<Typography className ={classes.ayatsText}>\r\n              \r\n               {quranData[count].text}\r\n               \r\n             </Typography>: <Typography className ={classes.ontabletorphone}>\r\n              \r\n               {quranData[count].text}\r\n               \r\n             </Typography>\r\n             }\r\n               </div>\r\n            }\r\n            </Grid>\r\n            <Grid  className={classes.paper} item  xs ={12} md={4} lg={4}>\r\n            <Button className={classes.choosemokrea}  aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n           اضغط هنا لتغيير المقرأ\r\n           </Button>\r\n          <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        {\r\n         props.edition[0] !== \"empty\"? props.edition.map((element,i)=>{\r\n          return <MenuItem key={i} id={element.identifier} onClick={handleClose}>{element.name}</MenuItem>\r\n          }):<MenuItem  onClick={handleClose}>empty</MenuItem>\r\n        }\r\n        \r\n       \r\n      </Menu>\r\n\r\n            <Listofmokrie data={props.data}  itemclicked={itemclicked} search ={props.search}/>\r\n           </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Mycontainer;","import React,{Component}  from 'react'\r\nimport Mycontainer from \"../components/container\"\r\nconst axios = require('axios');\r\nclass Getquran extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            ayat : [],\r\n            searching: \"\",\r\n            edition : [\"empty\"]\r\n            \r\n\r\n        }\r\n    }\r\n    \r\n     componentDidMount(){\r\n       axios.get('https://api.alquran.cloud/v1/surah')\r\n        .then( response =>{\r\n           \r\n               this.setState({ayat : response.data.data})\r\n           // console.log(this.state.ayat)\r\n           axios.get('https://api.alquran.cloud/v1/edition?format=audio&language=ar')\r\n           .then( response =>{\r\n              \r\n                  this.setState({edition : response.data.data})\r\n              // console.log(this.state.edition)\r\n           })\r\n           .catch(function (error) {\r\n             // handle error\r\n            // console.log(error);\r\n           })\r\n\r\n\r\n\r\n\r\n\r\n        })//end of then\r\n        .catch(function (error) {\r\n          // handle error\r\n         // console.log(error);\r\n        })\r\n       \r\n    }\r\n    search  = (event)=>{\r\n     this.setState({searching : event.target.value} )\r\n     \r\n    }\r\n    render(){\r\n      \r\n     \r\n\r\n        const ayat = this.state.ayat;\r\n       // console.log(ayat)\r\n        if(ayat === []){\r\n            return <h1>loading..</h1>\r\n        }else{\r\n      let filteredayat =  this.state.ayat.filter(\r\n          aya=>  aya.name.toLowerCase().includes(this.state.searching.toLowerCase()))\r\n          \r\n           return (<Mycontainer data={filteredayat} edition={this.state.edition} search={this.search} />)\r\n           \r\n        \r\n        }\r\n       \r\n    }\r\n}\r\nexport default Getquran;","import React from 'react'\r\nimport Navigation from \"../components/navigationbar\"\r\nimport Getquran from \"../components/getquran\"\r\nconst App = () => {\r\n\r\n    return (\r\n        <div >\r\n        <Navigation/>\r\n        <Getquran/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./mainjs/app\"\nimport 'tachyons'\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}